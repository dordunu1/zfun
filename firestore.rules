rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is creator
    function isCreator(collectionData) {
      return request.auth != null && 
        (collectionData.creator.toLowerCase() == request.auth.uid.toLowerCase() || 
         collectionData.creatorAddress.toLowerCase() == request.auth.uid.toLowerCase());
    }

    // Collections collection
    match /collections/{collectionId} {
      // Anyone can read collection data
      allow read: if true;
      
      // Allow creates with basic validation
      allow create: if 
        request.resource.data.name != null &&
        request.resource.data.symbol != null &&
        request.resource.data.contractAddress != null &&
        request.resource.data.type != null &&
        request.resource.data.maxSupply != null &&
        request.resource.data.mintPrice != null &&
        request.resource.data.maxPerWallet != null &&
        request.resource.data.network != null &&
        request.resource.data.contractAddress.matches('^0x[a-fA-F0-9]{40}$');
      
      // Allow updates to totalMinted field AND bannedUsers as separate operations
      allow update: if
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['totalMinted', 'updatedAt']) &&
         request.resource.data.totalMinted is number) ||
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['bannedUsers']));
      
      // No deletes allowed
      allow delete: if false;

      // Messages subcollection rules
      match /messages/{messageId} {
        allow read: if true;
        allow create: if true;
        allow delete: if true;
      }

      // Add moderation subcollection rules
      match /moderation/{moderationId} {
        allow read: if true;
        allow write: if true;
      }
    }

    // Token deployments collection
    match /tokenDeployments/{deploymentId} {
      allow read: if true;
      allow create: if 
        request.resource.data.name != null &&
        request.resource.data.symbol != null &&
        request.resource.data.address != null &&
        request.resource.data.chainId != null &&
        request.resource.data.chainName != null &&
        request.resource.data.logo != null &&
        request.resource.data.logoIpfs != null &&
        request.resource.data.totalSupply != null &&
        request.resource.data.creatorAddress != null &&
        request.resource.data.createdAt != null &&
        request.resource.data.type == 'token' &&
        request.resource.data.address.matches('^0x[a-fA-F0-9]{40}$');
      
      allow update, delete: if false;
    }

    // Token transfers collection
    match /tokenTransfers/{transferId} {
      allow read: if true;
      allow create: if 
        request.resource.data.fromAddress != null &&
        request.resource.data.toAddress != null &&
        request.resource.data.tokenAddress != null &&
        request.resource.data.amount != null &&
        request.resource.data.transactionHash != null &&
        request.resource.data.timestamp != null &&
        request.resource.data.fromAddress.matches('^0x[a-fA-F0-9]{40}$') &&
        request.resource.data.toAddress.matches('^0x[a-fA-F0-9]{40}$') &&
        request.resource.data.tokenAddress.matches('^0x[a-fA-F0-9]{40}$');
      
      allow update, delete: if false;
    }

    // Analytics collections with validation
    match /mints/{mintId} {
      allow read: if true;
      allow create: if 
        request.resource.data.collectionAddress != null &&
        request.resource.data.minterAddress != null &&
        request.resource.data.tokenId != null;
      allow update, delete: if false;
    }
    
    match /holders/{holderId} {
      allow read: if true;
      allow create, update: if 
        request.resource.data.collectionAddress != null &&
        request.resource.data.holderAddress != null &&
        request.resource.data.quantity is number;
      allow delete: if false;
    }
    
    match /minters/{minterId} {
      allow read: if true;
      allow create, update: if 
        request.resource.data.collectionAddress != null &&
        request.resource.data.minterAddress != null &&
        request.resource.data.totalMinted is number;
      allow delete: if false;
    }
    
    match /volume/{volumeId} {
      allow read: if true;
      allow create: if 
        request.resource.data.collectionAddress != null &&
        request.resource.data.volume is number &&
        request.resource.data.transactions is number;
      allow update, delete: if false;
    }

    // Allow anyone to read messages
    match /messages/{messageId} {
      allow read: if true;
      allow write: if 
        // Basic validation
        request.resource.data.text is string &&
        request.resource.data.text.size() <= 500 &&
        request.resource.data.sender is string &&
        request.resource.data.collectionAddress is string &&
        request.resource.data.timestamp is timestamp;
    }

    // Minters collection to track who has minted
    match /minters/{minterId} {
      allow read: if true;
      allow write: if 
        request.resource.data.collectionAddress is string &&
        request.resource.data.minterAddress is string;
    }

    match /collections/{collectionAddress}/messages/{messageId} {
      allow read: if true;
      allow create: if 
        // Basic message validation
        request.resource.data.text is string &&
        request.resource.data.text.size() <= 500 &&
        request.resource.data.sender is string &&
        request.resource.data.timestamp is timestamp &&
        (
          // For normal messages, these fields should be null
          (
            request.resource.data.replyTo == null &&
            request.resource.data.threadId == null &&
            request.resource.data.isThread == false &&
            request.resource.data.threadDepth == null
          ) ||
          // For reply messages, validate reply structure
          (
            request.resource.data.replyTo.messageId is string &&
            request.resource.data.replyTo.text is string &&
            request.resource.data.replyTo.text.size() <= 100 &&
            request.resource.data.replyTo.sender is string &&
            request.resource.data.threadId is string &&
            request.resource.data.isThread == true &&
            (request.resource.data.threadDepth == null || request.resource.data.threadDepth <= 3)
          )
        );
      allow update: if false;
      allow delete: if false;
    }
  }
}