rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Collections collection
    match /collections/{collectionId} {
      // Anyone can read collection data
      allow read: if true;
      
      // Allow creates with basic validation
      allow create: if 
        request.resource.data.name != null &&
        request.resource.data.symbol != null &&
        request.resource.data.contractAddress != null &&
        request.resource.data.type != null &&
        request.resource.data.maxSupply != null &&
        request.resource.data.mintPrice != null &&
        request.resource.data.maxPerWallet != null &&
        request.resource.data.network != null &&
        request.resource.data.contractAddress.matches('^0x[a-fA-F0-9]{40}$');
      
      // Allow updates to totalMinted field
      allow update: if
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['totalMinted', 'updatedAt']) &&
        request.resource.data.totalMinted is number;
      
      // No deletes allowed
      allow delete: if false;
    }

    // Token deployments collection
    match /tokenDeployments/{deploymentId} {
      allow read: if true;
      allow create: if 
        request.resource.data.name != null &&
        request.resource.data.symbol != null &&
        request.resource.data.address != null &&
        request.resource.data.chainId != null &&
        request.resource.data.chainName != null &&
        request.resource.data.logo != null &&
        request.resource.data.logoIpfs != null &&
        request.resource.data.totalSupply != null &&
        request.resource.data.creatorAddress != null &&
        request.resource.data.createdAt != null &&
        request.resource.data.type == 'token' &&
        request.resource.data.address.matches('^0x[a-fA-F0-9]{40}$');
      
      allow update, delete: if false;
    }

    // Token transfers collection
    match /tokenTransfers/{transferId} {
      allow read: if true;
      allow create: if 
        request.resource.data.fromAddress != null &&
        request.resource.data.toAddress != null &&
        request.resource.data.tokenAddress != null &&
        request.resource.data.amount != null &&
        request.resource.data.transactionHash != null &&
        request.resource.data.timestamp != null &&
        request.resource.data.fromAddress.matches('^0x[a-fA-F0-9]{40}$') &&
        request.resource.data.toAddress.matches('^0x[a-fA-F0-9]{40}$') &&
        request.resource.data.tokenAddress.matches('^0x[a-fA-F0-9]{40}$');
      
      allow update, delete: if false;
    }

    // Analytics collections with validation
    match /mints/{mintId} {
      allow read: if true;
      allow create: if 
        request.resource.data.collectionAddress != null &&
        request.resource.data.minterAddress != null &&
        request.resource.data.tokenId != null;
      allow update, delete: if false;
    }
    
    match /holders/{holderId} {
      allow read: if true;
      allow create, update: if 
        request.resource.data.collectionAddress != null &&
        request.resource.data.holderAddress != null &&
        request.resource.data.quantity is number;
      allow delete: if false;
    }
    
    match /minters/{minterId} {
      allow read: if true;
      allow create, update: if 
        request.resource.data.collectionAddress != null &&
        request.resource.data.minterAddress != null &&
        request.resource.data.totalMinted is number;
      allow delete: if false;
    }
    
    match /volume/{volumeId} {
      allow read: if true;
      allow create: if 
        request.resource.data.collectionAddress != null &&
        request.resource.data.volume is number &&
        request.resource.data.transactions is number;
      allow update, delete: if false;
    }

    // Pools collection with updated rules for nested objects
    match /pools/{poolAddress} {
      // Anyone can read pool data
      allow read: if true;
      
      // Allow creates with validation for nested objects
      allow create, write: if 
        // Basic pool data validation
        request.resource.data.poolAddress != null &&
        request.resource.data.creatorAddress != null &&
        request.resource.data.factory != null &&
        
        // Token0 validation
        request.resource.data.token0.address != null &&
        request.resource.data.token0.symbol != null &&
        request.resource.data.token0.decimals is number &&
        request.resource.data.token0.name != null &&
        
        // Token1 validation
        request.resource.data.token1.address != null &&
        request.resource.data.token1.symbol != null &&
        request.resource.data.token1.decimals is number &&
        request.resource.data.token1.name != null &&
        
        // Reserves validation (optional)
        (!('reserves' in request.resource.data) || (
          request.resource.data.reserves.reserve0 is string &&
          request.resource.data.reserves.reserve1 is string
        )) &&
        
        // Address format validation
        request.resource.data.creatorAddress.matches('^0x[a-fA-F0-9]{40}$') &&
        request.resource.data.token0.address.matches('^0x[a-fA-F0-9]{40}$') &&
        request.resource.data.token1.address.matches('^0x[a-fA-F0-9]{40}$');
      
      // Allow updates to reserves and totalLiquidity
      allow update: if
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['reserves', 'lastUpdated', 'totalLiquidity']);
      
      // No deletes allowed
      allow delete: if false;
    }

    // User Pools collection
    match /userPools/{userPoolId} {
      // Allow read and write for all users
      allow read, write: if true;
      
      // No deletes allowed
      allow delete: if false;
    }
  }
}
